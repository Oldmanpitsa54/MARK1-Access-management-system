;               СИСТЕМА КОНТРОЛЯ И УПРАВЛЕНИЯ ДОСТУПОМ "МАРК1"
;-------------------------------------------------------------------------------
;ТЕХНИЧЕСКИЕ ПОДРОБНОСТИ:
;
;       прошивка для PIC16F628
;       COM порт реализован аппаратно
;       Параметры COM 2400 бод(чтение), 8 бит, 1 стоп бит
;       Генератор внутренний =4МГц
;       Прерывания по изменениям на RB,
;                  по приему/передаче символа UART,
;                  по TMR для определения конца блока,
;                  по изменению на INT
;       Делитель перед TMR0 на 256 (прерывание по TMR0 - 0.066с )
;       Слип-режим отсутствует
;       Ворзможность подключения сегментного сдвигового ЖКИ для отображения
;                  (Potra,00 - данные(инверсные), Porta01 - такты(инверсные))

;АППАРАТНАЯ ЧАСТЬ
;Прием данных реализован пакетами по 13 байт. Источником данных является чип, прикладываемый к считывателю.
;Входные данные обрабатываются в зависимости от текущего режима работы процессора. Программой предусмотрено три 
;режима обработки данных со считывателя: обычный режим(режим открытия замка), режим добавления(занесения в память
;нового ключа), режим очистки(удаления раннее занесенных в память данных с ключей). Работа режимов добавления и 
;режима очистки индицируется быстрым миганием и прерывистым миганием светодиодов соответственно. 
; Подача питания осуществляется в зависимости от выставленного режима. Программой предусмотрено два 
;режима питания: основное(от электросети) и альтернативное(от аккумулятора), автоматически активирующееся при отсутствии 
;основного питания. Также имеется возможность непосредственнокго отключения питания путем нажатия расположенной на
;материнской плате кнопки с фиксацией. Помимо кнопки управления питанием функционалом предусмотрено наличие еще двух кнопок:
;простая кнопка для управления режимами обработки данных со считывателя(обычного режима, режима добавления и режима очистки),
;кнопка со встроенным светодиодом для аварийного открытия замка. Индикация различных состояний работы процессора происходит
;при помощи двух светодиодов: светодиод на плате(перманентное горение в режиме основного питания, ритмичное мигание в режиме 
;аварийного питания,ритмичное быстрое мигание в режиме добавления, прерывистое мигание в режиме очистки), светодиод на кнопке
;(перманентное горение в режиме закрытого замка, ритмичное быстрое мигание в режиме добавления, прерывистое мигание в режиме очистки).
;Включение замка происходит после двухсекундной задержки при прерывании по сигналу с оптопары, имеющейся на плате (рассчитано на
;автоматическое закрытие электроригеля после закрытия обычного замка на максимальное количество оборотов, при выходе из помещения
;ригель обычного замка перекрывает собой луч на оптопаре, вызывая прерывание и задержку для закрытия замка). Задержка нужна для
;удостоверения в том, что электро-механический замок сработал, без риска спутать звук со звуком закрытия обычного замка при 
;повороте ключа. Для прошивки процессора используется программатор PicKit2. Также схемой предусмотрена возможность подключения и 
;использования жидкокристаллического дисплея(в данной работе индикатор использовался для проверки работы отдельных блоков кода, а 
;также для проверки правильности считываемых данных).  
; На материнской плате реализовано 7 разъемов: 
;1)Разъем основного питания
;2)Разъем альтернативного питания
;3)разъем для подключения считывателя
;4)Разъем для подключения жидкокристаллического дисплея
;5)Сдвоенные разъемы для подключения двух замков
;6)Разъем для подключения программатора






;УПРАВЛЕНИЕ УСТРОЙСТВОМ
;По умолчанию после подачи питания процессор работает в штатном режиме и считывание данных из памяти рассчитано на поиск в памяти
;данных, идентичных принимаемым с прикладываемого к считывателю чипа-ключа. При совпадении данных процессором подается соответствующий
;сигнал через транзистор и реле на замок, вследствие чего он открывается. При отсутствии совпадений данных в памяти и в подносимом 
;ключе изменений не происходит. Для занесения в память данных нового ключа(до 25) необходимо нажать и удерживать в течении трех секунд 
;кнопку на плате, после чего светодиодами будет производиться соответствующая индикация, а данные со всех подносимых к считывателю ключей 
;будут записываться в память устройства. Для введения в режим очистки необходимо, находясь в режиме добавления, повторно произвести нажатие 
;кнопки на плате, после чего светодиодами будет производиться соответствующая индикация, а при поднесении к считывателю ключа из памяти будут 
;стираться все данные. Для возвращения в штатный режим необходимо, находясь в режиме очистки, повторно нажать на кнопку управления режимами 
;на плате. При непредвиденных ошибках, приведших к невозможности открытия замка при помощи чипа-ключа, следует воспользоваться кнопкой аварийного 
;выключения питания, что приведет к отключению замка. 
;
;АЛГОРИТМ РАБОТЫ(old):

;   Прием/передача данных реализована пакетами по 8 байт в дуплексном режиме.
;Источником данных может служить оптический канал или внешний разьем. Полу-
;чателем данных соответсвенно становиться наоборот внешний разьем или опти-
;ческий канал. Направление приема/передачи определяется при получении первого
;байта от любого источника и не может поменяться до окончания данных. Признаком
;окончания данных устанавливается при достижении счетчика байт до предустанов-
;ленного размера (при установке "размера будущих данных" перед передачей самих
;данных) либо по истечении 1.04с после получения последних данных.
;   Оптические каналы приема/передачи и проводные каналы приема/передачи све
;дены на отдельные порты процессора. Выбор направления и подключение того или
;иного канала к UART происходит в процедуре обработки прерываний порта.
;   Приемник UART включен постоянно, передатчик, только при необходимости передачи
;пакета. Передача пакета данных с источника на получателя реализована с тройной
;буфферизацией. Входной буффер имеет длинну 16 байт. При заполнении 8 или
;более байт первые 8 байт переписываются в средний буффер (если он свободен),
;оставшиеся байты во входном буффере переписываются в начало буффера. Средний
;буффер имеет длину 8 байт и в нем происходит анализ данных на "комадну",
;шифрование/дешифрование данных (если необходимо). После этого идет передача
;данных в выходной буффер (если он свободен) и включение передатчика. Выходной
;буффер также имеет длину 8 байт и из него только идет пердача на UART. После
;окончания передачи данных процессор переходит в Слип-режим.
;   При подаче питания на оптическую головку, процессор выдает на проводной
;канал ответ готовности и переходит в Слип-режим.
;   Оптическая головка имеет ряд команд для управления:
;1. Выдача информации о прошивке процессора.
;2. Установка режима выдачи контрольной информации о переданных данных.
;   После передачи данных на проводной канал выдается 8 байт контрольной
;   информации о переданных данных.
;3. Установка длины следущего блока данных.
;   При получении установленного количества байт блока данных признак окончания
;   блока наступает незамедлительно, не дожидаясь таймера, что позволяет сразу
;   перейти в режим приема данных от любого источника данных.
;4. Установка шифрованного режима передачи.
;   Данные проходящие по проводному каналу шифрованные. Данные идущие через оп-
;   тический канал остаются открытыми.
;5. Установка скорости передачи данных.
;   Осуществление передачи на скоростях 300,600,1200,2400 бод.
;6. Сброс всех командныу установок
;7. Засветить светодиод оптического канала (отладочная)
;8. Погасить светодиод оптического канала (отладочная)
;9. Установить вариант индикации на ЖКИ.
;   Установка значения регистра DISPDAT, в котором указан режим работы
;   оптической головки, в т.ч. и вариант индикации данных на ЖКИ.
;   Команды управления всегда передаются нешифрованные и только с проводного
;канала, ответ на команды также передается нешифрованный и только на проводной
;канал. Команды не декриментируют счетчики блоков данных, участвующие в реали-
;зации различных командных установок (количество блоков с шифрованием, коли-
;чество блоков, передаваемых на др.скорости...)


;ФОРМАТ КОМАНД УПРАВЛЕНИЯ ОПТИЧЕСКОЙ ГОЛОВКОЙ.

;Могут передаваться как с внешнего устройства, так и с фотоприемника
;3 байт - (4F 52 43) - инициализация устройста на управление
;4 байт - команда
;         FA                      - выдать информацию об прошивке по формату
;                                   код команды 10
;                                   Ответ:(ORA: V.S).Некодированный.
;                                   V   - версия прошивки
;                                   S   - подверсия прошивки
;         FB NB TB                - выдавать информацию об ошибках после
;                                   следущих NB блоков.
;                                   код команды 20
;                                   TB -тип блока, для которого выдавать инфу
;                                   1 - только для блоков с фотоприемника
;                                   2 - только для блоков с внешнего устройства
;                                   остальные - для всех блоков
;                                   Ответ:(ORA:ECDD).Некодированный.
;                                   E  - байт возникших ошибок (битовые флаги)
;                                   С  - байт контрольной суммы принятого блока
;                                   DD - два младших байта длины принятого блока с младшего
;         EA DL DH DS             - установить длину следущ блок данных  DL DH DS
;                                   код команды 30
;                                   Ответ:(ORA: OK).Некодированный.
;         EB NB TC CW             - установить кодировку/раскодировку для
;                                   следущих NB блоков.
;                                   код команды 31
;                                   Младший полубайт TC определяет тип кодировки
;                                   Ответ:(ORA: OK).Некодированный. Кодировка установлена
;                                   Ответ:(ORA: ER1).Некодированный. Тип кодировки не поддерживается
;         EС NB SP                - установить скорость приема для следущих
;                                   NB блоков.
;                                   код команды 32
;                                   SP - скорость приема/передачи
;                                   0 -  1200 бод (по умолчанию)
;                                   1 -   300 бод
;                                   2 -  2400 бод
;                                   3 -  4800 бод (не поддерживается, уже не успевает)
;                                   4 -  9600 бод (не поддерживается, уже не успевает)
;                                   5 - 19200 бод (не поддерживается, уже не успевает)
;                                   6 -   600 бод
;                                   Ответ:(ORA: OK).Некодированный. Скорость установлена
;                                   Ответ:(ORA: ER1).Некодированный. Скорость не поддерживается
;         ED DL DH DS             - установить длину постследущего блока данных  DL DH DS
;                                   код команды 33
;                                   Ответ:(ORA: OK).Некодированный.
;         DA                      - сбросить командные установки
;                                   код команды 40
;         CA                      - засветить светодиод (отладочная)
;                                   код команды 50
;         CB                      - погасить светодиод (отладочная)
;                                   код команды 51
;         CC BYTE                 - изменить вариант настройки индикации (отладочная)
;                                   код команды 52
;                                   BYTE - битовые флаги аналогично DISPDAT
;1 байт - КС (добавляет 8 байт команды до нуля в XOR)


;ТИПЫ КОДИРОВОК

;TC=*****001. Двухбайтовый последовательный XOR.
;   Изначально два байта CW и 8-й байт команды записываютя как ключи кодировки.
;   Этими двумя ключами поочередно XORятся байты среднего буффера. Результат
;   записывается как ответ и как ключи для следующих двух байт.


;ИНДИКАЦИЯ НА ЖКИ

;'--------P0' - индицирует окончание приема с фотоприемника
;'--------P1' - индицирует окончание приема с внешнего устройства
;'-NN' - индицирует код принятой команды (NN - код)
;'-10' - индицирует команду "выдать информацию об прошивке"
;'-20' - индицирует команду "выдавать информацию об ошибках"
;'-30' - индицирует команду "установить длину следущ блока данных"
;'-31' - индицирует команду "установить кодировку/раскодировку"
;'-32' - индицирует команду "установить скорость приема"
;'-40' - индицирует команду "сбросить командные установки"
;'-50' - индицирует команду "засветить светодиод"
;'-51' - индицирует команду "погасить светодиод"
;'-52' - индицирует команду "изменить вариант настройки индикации"
;'F1'  - индицирует ошибку бита четности в операции
;'F2'  - индицирует аппаратную ошибку переполнения приема USART
;'F3'  - индицирует аппаратную ошибку кадра приема USART
;'F5'  - индицирует ошибку старта блока по запросу
;'F6'  - индицирует ошибку понижения питания
;'F7'  - индицирует ошибку несоответствия контр.сумм вх и вых. данных
;'F8'  - индицирует ошибку несоответствия длин вх и вых. данных
;'F10' - индицирует ошибку приема из UART "не успел освободится средний буффер"




;ПРОШИВКА

VERS    EQU     01H     ; версия прошивки 
SUBVERS EQU     01H     ; подверсия прошивки 
DISPDAT EQU     B'00000100' ; 0 бит - отображать входные данные
                            ; 1 бит - отображать выходные данные
                            ; 2 бит - отображать ошибки в конце
                            ; 3 бит - тестовый режим - весь вывод на внешнее устр.
                            ; 4 бит - тестовый режим - разрешение прерывания по кнопке (не сдвигать на др бит)
;специальные регистры
INDIR   EQU     00H     ; Indirect pointer
TMR0    EQU     01H     ; Таймер-счетчик0
;        EQU     02H     
STATUS  EQU     03H     ; регистр флагов опреаций STATUS
CY      EQU     0       ; Перенос/заем
DC      EQU     1       ; Перенос/заем в ст.тетраду
Z       EQU     2       ; Нуль
PD      EQU     3       ; Power down
T0      EQU     4       ; Time-out bit..
RP0     EQU     5       ; Выбор банка при непоср. адресации
RP1     EQU     6       ; Выбор банка при непоср. адресации
IRP     EQU     7       ; Выбор банка при косвенной адресации
FSR     EQU     04H     ; Indirect pointer
PORTA   EQU     05H     ; PORT A
 SV_BTTN EQU	 3			;Светодиод на кнопке
 SV_BRD	 EQU	 4			;Светодиод на плате
PORTB   EQU     06H     ; PORT B
;        EQU     0AH     
INTCON  EQU     0BH     ; регистр INTCON
PIR1    EQU     0CH     ; регистр флагов прерываний перефирии
;	    EQU     0EH     
; 	    EQU     0FH     
T1CON   EQU     010H    ; регистр управления таймером-счетчиком1
TMR2    EQU     011H    ; Таймер-счетчик2
T2CON   EQU     012H    ; регистр управления таймером-счетчиком2
;        EQU     015H    
;        EQU     016H    
CCP1CON EQU     017H    ; регистр управления ЗСШ
RCSTA   EQU     018H    ; регистр управления и статуса приемника USART
TXREG   EQU     019H    ; данные передатчика USART
RCREG   EQU     01AH    ; данные приемника USART
CMCON   EQU     01FH    ; регистр управления компараторами

OPTIO   EQU     081H    ; регистр OPTION
TRISA   EQU     085H    ; регистр управления портомA
TRISB   EQU     086H    ; регистр управления портомB
PIE1    EQU     08CH    ; регистр управления прерываниями перефирии
PCON    EQU     08EH    ; регистр флагов сброса
PR2     EQU     092H    ; период для таймера-счетчика2
TXSTA   EQU     098H    ; регистр управления и статуса передатчика USART
SPBRG   EQU     099H    ; регистр скорости обмена USART
EEDATA  EQU     09AH    ; данные Eeprom 
EEADR   EQU     09BH    ; адрес Eeprom
EECON1  EQU     09CH    ; регистр управления Eeprom
RD      EQU     0       ; чтение EEPROM
WR      EQU     1       ; запись EEPROM
WREN    EQU     2       ; разрешение записи EEPROM
EECON2  EQU     09DH    ; вспомогательный регистр управления Eeprom
VRCON   EQU     09FH    ; регистр управления опорным напряжением для компар.

W       EQU     0       ; W reg. as destination
F       EQU     1       ; F file as destination

;регистры общего назначения
; 	    EQU     023H    
;	    EQU     024H    
;	    EQU     025H    
;	    EQU     026H    
COPORTB EQU     027H    ;копия PORTB для работы
LASTPB  EQU     028H    ;прошлая копия PORTB
;	    EQU     029H    
;	    EQU     02AH    
COREGW  EQU     02BH    ;копия регистра W
COSTAT  EQU     02CH    ;копия регистра STATUS
COFSR   EQU     02DH    ;копия регистра FSR
COPIE1  EQU     02EH    ;копия регистра PIE1
;регистры используемые в командах управления устройством
;	    EQU     02FH    
;	    EQU     030H    
;	    EQU     031H    
;	    EQU     032H    
;	    EQU     033H    
;	    EQU     034H    
;	    EQU     035H    
;	    EQU     036H    
;	    EQU     037H    
;	    EQU     038H    
;	    EQU     039H    
;	    EQU     03AH    
;	    EQU     03BH    
;	    EQU     03CH    
;	    EQU     03DH    
;	    EQU     03EH    
;остальные регистры общего назначения
;	    EQU     03FH    
;	    EQU     040H    
;	    EQU     041H    
;	    EQU     042H
;	    EQU     043H
;	    EQU     044H
;	    EQU     045H   
;	    EQU     046H
;	    EQU     047H
;	    EQU     048H
;	    EQU     049H    
;	    EQU     04AH    
EEPROM_BYTE_COUNT     EQU     04BH      ;количество байт информации с ключей
EEPROM_KEYS_COUNT     EQU     04CH		;количество занесенніх в память ключей
RFID_CHECKSUM	      EQU     04DH		;регистр контрольной суммы
RFID_TIMEOUT          EQU     051H		;счетчик таймера для сброса принятых байт USART
TMR0_COUNT_LCK        EQU     052H		;счетчик таймера задержки для замка
SV_STATUS       	  EQU     053H		;регистр состояний светодиодов
 SVD_BRD	  EQU	 0	 ;состояние светодиода на плате 0 — выключен, 1 — включен
 SVD_BTTN	  EQU	 1	 ;состояние светодиода на кнопке	0 — выключен, 1 — включен
RFID_TEMP1	EQU     067H    ;текущий байт в выходн буффере
;5 регистров буффера RFID
RFID0	 EQU	 068H
RFID1	 EQU	 069H
RFID2	 EQU	 06AH
RFID3	 EQU	 06BH
RFID4	 EQU	 06CH
RFID1_COUNT    	EQU     06DH	;счетчик полученных данных RFID
RFID2_COUNT 	EQU     06EH	;счетчик байт в выходном буфере RFID
RFID_ERROR	    EQU     06FH	;ошибка при работе с RFID
;непереносимые регистры 070H-07FH доступные из любых банков
FLAGS   EQU     070H    ;регистр вспомогательных флагов
 DATIRF EQU     1       ;флаг "источник данных - фотоприемник"   
 DATEXT EQU     2       ;флаг "источник данных - внешнее устройство"
 NOCOMM EQU     5       ;блокировка поиска "команды устройству" в среднем буффере
 NECHOU EQU     6       ;флаг "нечет" (кол-во байт последнего выданного блока нечетное)
FLAGS2  EQU     071H    ;регистр вспомогательных флагов2
 BITCS  EQU     0       ;бит четности (вычисляемый)
 BITCSC EQU     1       ;бит четности (принимаемый/передаваемый)
 COPZ   EQU     2       ;копия флага Z до прерывания
 COPRP  EQU     3       ;копия номера банка до прерывания
 BLOIN  EQU     4       ;флаг "блок из USART"
 BLOUT  EQU     5       ;флаг "блок в  USART"
 ENDBLC EQU     6       ;флаг "конец блока из USART"
FLAGSER EQU     072H    ;регистр флагов ошибок
 ERCS   EQU     0       ;ошибка при проверке четности
 ERTIBB EQU     1       ;ошибка приема из UART "не успел освободится средн.буф"
 ERAPR  EQU     2       ;аппаратная ошибка переполнения  при приеме из USART
 ERAPR2 EQU     3       ;аппаратная ошибка кадра при приеме из USART
 ERSTAB EQU     4       ;ошибка начала блока по запросу
 ERPWR  EQU     5       ;ошибка понижения питания
 ERCS2  EQU     6       ;ошибка несоответствия контр.сумм вх и вых. данных
 ERDL2  EQU     7       ;ошибка несоответствия длин вх и вых. данных
FLAGSCM EQU     073H    ;регистр флагов команд
 CMDLIN EQU     2       ;флаг команды ограничения длины блока
 CMERRS EQU     3       ;флаг команды на выдачу ошибок блока
 CMCODN EQU     4       ;флаг команды установки кодирования
 CMSPED EQU     5       ;флаг команды установки другой скорости
;	    EQU     074H    
ZADL    EQU     075H    ;регистр для задержки L  ;менять очередность в памяти 
ZADH    EQU     076H    ;регистр для задержки H  ;нельзя, так как используется
ZADS    EQU     077H    ;регистр для задержки S  ;при последов.сохран/восст.
;	    EQU     078H    
;	    EQU     079H    
TMR0_COUNT_BUT  EQU     07BH
TMR0_COUNT_SV   EQU     07CH    ;рабочий регистр4; менять адрес нельзя-доступ с любого банка
SV_BRD_COUNT    EQU     07DH
SV_BUT_COUNT    EQU     07EH
MODE            EQU     07FH    ;рабочий регистр5; менять адрес нельзя-доступ с любого банка
 PWR		  EQU		0		;0 — основное питание, 1 — альтернативное
 PROG		  EQU		1		;режим программирования 0 — выключен, 1 — включен
 LCK		  EQU		2		;состояние замка: 0 — выключен, 1 — включен
 WAIT_PRG     EQU		3	 ;режим ожидания для двухсекундного удержания кнопки 
 ADD_DEL	  EQU	 	4	 ;подрежимы программирования: 0 — добавление нового ключа, 1 — удаление всех ключей
 WAIT_RFID	  EQU	 	5	 
 RFID		  EQU		6
 WAIT_LCK	  EQU	 	7	 ;режим ожидания для задержки срабатывания замка 0 — выключен, 1 — включен
;рабочие регистры второго банка
RR1DISP EQU     0A0H    ;рабочий регистр 1 для индикации
RR2DISP EQU     0A1H    ;рабочий регистр 2 для индикации
;константы
C_SV_BASE_CYCL    EQU     D'8'    ;базовое кол-во циклов работы (свечение и несвечение) светодиода для обеспечения режима мигание-пауза
C_SV_HALF_CYCL    EQU     D'4'     ;половина базового кол-во циклов работы (свечение и несвечение) светодиода для обеспечения режима мигание-пауза
C_TMR0_PRG_CYCL   EQU     D'3'     ;кол-во прерываний для мигания светодиода в режиме программирования 
C_TMR0_PWR_CYCL   EQU     D'15'    ;кол-во прерываний для мигания светодиода в режиме аккумуляторного питания
C_TMR0_LONG_BUT   EQU     D'30'    ;кол-во прерываний для ожидания долгого (2 сек) нажатия кнопки
C_TMR0_LONG_LCK	  EQU	  D'30'	   ;кол-во прерываний для задержки (2 сек) закрівания замка
C_RFID_ADRESS	  EQU	  068H
C_RFID_PACKET_IN_COUNT	  EQU	 D'13'
C_RFID_CODE_COUNT		  EQU	 D'5'
C_RFID_TIMEOUT	  EQU	  D'15'
C_EEPROM_MAXKEYS  EQU	  D'25'




;основная программа
;******************

        ORG     0000H
        CALL    SETUP
        GOTO    START


;программа прерываний
;********************
;максимальная вложенность процедур = 2

        ORG     0004H
MYINT   BCF     INTCON,07H      ;ЗАПРЕТ ВСЕХ ПРЕРЫВАНИЙ
        ;создание копии регистра W,STATUS,FSR  и бита Z
        CALL    COPYREG
        ;проверка на изменение состояния на RB и обработка		
        BTFSC   INTCON,03H      ;если разрешено прерывания по изменению на RB
         CALL   INTERRB         ;то проверить
        ;проверка прерывания от INT
        MOVLW   B'00010010'     
        ANDWF   INTCON,W
        SUBLW   B'00010010'
        BTFSC   STATUS,Z      
         CALL   INTERIN         ;обработка прерываний от INT (исключительно отладочная процедура)
        ;проверка прерываний периферии
        BSF     STATUS,RP0      ;БАНК1
        MOVF    PIE1,W
        BCF     STATUS,RP0      ;БАНК0
        MOVWF   COPIE1          ;сохранить разрешение прер.от периферии
        MOVF    COPIE1,W        ;проверка на наличие байта в приемнике USART
        ANDWF   PIR1,W
        ANDLW   B'00100000'
        BTFSS   STATUS,Z
         CALL   INTINB          ;обработка прерывания при приеме байта в USART
        ;проверка на изменение состояния на RB и обработка
        BTFSC   INTCON,03H      ;если разрешено прерывания по изменению на RB
         CALL   INTERRB         ;то проверить
      	
        ;проверка на изменение состояния на RB и обработка
        BTFSC   INTCON,03H      ;если разрешено прерывания по изменению на RB
         CALL   INTERRB         ;то проверить
        ;проверка прерывания на таймер
        MOVLW   B'00100100'     
        ANDWF   INTCON,W
        SUBLW   B'00100100'
        BTFSC   STATUS,Z      
         CALL   INTERT0         ;обработка прерываний таймера
        ;проверка на изменение состояния на RB и обработка
        BTFSC   INTCON,03H      ;если разрешено прерывания по изменению на RB
         CALL   INTERRB         ;то проверить
        ;восстановление значения регистров W,STATUS,FSR  и бита Z
        CALL    VOSTREG
        RETFIE


;прерывание по нажатию кнопки (исключительно отладочная процедура)
;-------------------
;максимальная вложенность =0
INTERIN NOP
        BCF     INTCON,01H      ;сброс флага прерывания INT
		CALL	LOCK_OFF
		MOVF	RFID1_COUNT, W
		CALL 	DISPBYT
		RETURN



;обработка прерываний RB
;используется временный регистр 
;-------------------
;максимальная вложенность =0
INTERRB BCF		INTCON, 00H		;сброс флага прерывания RB
        MOVF    PORTB,W         ;далее работать с копией порта  
        MOVWF   COPORTB
        ;проверка на изменение данных с датчика питания (PORTB,04H)
INTERRB_RB4 
        MOVF    COPORTB,W
        XORWF   LASTPB,W
		ANDLW	B'00010000'
		BTFSC	STATUS, Z
		 GOTO	INTERRB_RB6
        BCF     MODE, PWR		;в регистре режима включаем флаг аварийного питания
		BTFSC	COPORTB, 04H		;проверяем сигнал датчика питания, если 1
		 BSF    MODE, PWR		;в регистре режима включаем флаг аварийного питания
		CALL	TMR0_PROCESS
        ;проверка на изменение данных с кнопки Режим (PORTB,06H)
INTERRB_RB6
        MOVF    COPORTB,W
        XORWF   LASTPB,W
		ANDLW	B'01000000'
		BTFSC	STATUS, Z
		 GOTO	INTERRB_RB5
		BTFSS	COPORTB, 06H
		 GOTO	INTERRB_RB6_C
INTERRB_RB6_S                   ;кнопка отжата
        CLRF    TMR0_COUNT_BUT  ;сбрасываем счетчик долгого нажатия кнопки
  		BCF	    MODE, WAIT_PRG  ;сбрасываем режим ожидания программирования
		CALL	TMR0_PROCESS
		GOTO	INTERRB_RB5
INTERRB_RB6_C                   ;кнопка нажата
    	BTFSS	MODE, PROG
		 GOTO	INTERRB_RB6_C_WAIT_PRG
    	BTFSS	MODE, ADD_DEL
		 GOTO	INTERRB_RB6_C_PRG_DEL
		GOTO	INTERRB_RB6_C_PRG_EXT
INTERRB_RB6_C_WAIT_PRG          ;переходим в режим ожидания программирования
		BSF		MODE, WAIT_PRG  
		CALL	TMR0_PROCESS
        GOTO    INTERRB_RB5
INTERRB_RB6_C_PRG_DEL           ;переходим в режим программирования на удаление 
		BSF		MODE, ADD_DEL
        CLRF    SV_BRD_COUNT    ;сбрасываем счетчик циклов мигания сетодиода 
        CLRF    SV_BUT_COUNT    ;сбрасываем счетчик циклов мигания сетодиода 
		CALL	TMR0_PROCESS
        GOTO    INTERRB_RB5
INTERRB_RB6_C_PRG_EXT           ;выход из режима программирования
		BCF		MODE, ADD_DEL
		BCF		MODE, PROG
		CALL	TMR0_PROCESS
        GOTO    INTERRB_RB5
        
INTERRB_RB5 
		MOVF    COPORTB,W			;проверка на изменение данных с датчика закрытия физического замка	
        XORWF   LASTPB,W
		ANDLW	B'00100000'					
		BTFSC	STATUS, Z 
		 GOTO	INTERRB_EXIT
		BTFSC	COPORTB, 05H
		 BSF	 MODE, WAIT_LCK
		CALL	TMR0_PROCESS
		GOTO	INTERRB_EXIT
INTERRB_EXIT
        MOVF    COPORTB,W       ;запомнить портв как предыд. значение
        MOVWF   LASTPB
        ;системные флаги и установки
        BCF     INTCON,00H      ;сброс флага прерывания RB
 ;       BSF     INTCON,03H      ;разрешить прер.по RB
        RETURN


;прерывание по таймеру (окончание какого-либо сеанса)
;-------------------
;максимальная вложенность =0
INTERT0 BCF     INTCON,02H      ;сброс флага прерывания TMR0
		MOVLW	B'00000011'	;проверяем режимы аварийного питания и программирования, если выключены, переходим в INTERT0_1 
		ANDWF	MODE, W
		BTFSC	STATUS, Z
		 GOTO	INTERT0_1
		DECFSZ	TMR0_COUNT_SV, F					;декрементируем значение счетчика прерываний для мигания светодиода
		 GOTO	INTERT0_1
		CALL	TMR0_PROCESS
INTERT0_1
		BTFSS	MODE, WAIT_PRG		 ;проверяем режим ожидания, если выключен — переходим в INTERT0_2
		 GOTO	INTERT0_2			
		DECFSZ	TMR0_COUNT_BUT, F
		 GOTO	INTERT0_2			
		BCF		MODE, WAIT_PRG
		BSF		MODE, PROG
    	CALL	TMR0_PROCESS
INTERT0_2
		BTFSS	MODE, WAIT_LCK
		 GOTO	INTERT0_3
		DECFSZ	TMR0_COUNT_LCK, F
		 GOTO	INTERT0_3
		BCF		MODE, WAIT_LCK
		CALL	LOCK_ON
		CALL	TMR0_PROCESS
INTERT0_3	
		BTFSS	MODE, WAIT_RFID
		 GOTO	INTERT0_4
		DECFSZ	RFID_TIMEOUT,F
		 GOTO	INTERT0_4
		CALL	RFID_ERASE
		MOVLW	D'7'
		MOVWF	RFID_ERROR
		BCF		MODE, WAIT_RFID
		BSF		MODE, RFID
		
INTERT0_4
		RETURN


;----------------------------------------------



;прерывание при приеме байта в USART
;-------------------
;максимальная вложенность процедур = 1
INTINB
		;режим
		BCF		MODE, RFID
		BSF		MODE, WAIT_RFID
        ;переинициализация таймера приема с USART
		CLRF	RFID_TIMEOUT
		CALL	TMR0_PROCESS
        ;проверка на аппаратные ошибки приема
        BTFSS   RCSTA,01H       
         GOTO	ERR2_CHECK
		MOVLW	D'1'
		MOVWF	RFID_ERROR
		MOVF    RCREG,W         ;три раза считать, чтобы снять флаг прер от приемника
        MOVF    RCREG,W
        MOVF    RCREG,W
        BCF     RCSTA,04H       ;выключение приемника
        BSF		RCSTA,04H
		GOTO	INC_RFID1
ERR2_CHECK
	    BTFSS   RCSTA,02H
         GOTO	ERR3_CHECK
		MOVLW	D'2'
		MOVWF	RFID_ERROR
		MOVF    RCREG,W         ;три раза считать, чтобы снять флаг прер от приемника
        MOVF    RCREG,W
        MOVF    RCREG,W
        BCF     RCSTA,04H       ;выключение приемника
        BSF		RCSTA,04H
		GOTO	INC_RFID1
ERR3_CHECK
        ;прием входного байта с USART
        MOVF	RCREG, W
		MOVWF	RFID_TEMP1
        ;если ошибка при приеме предыдущих байт, то не анализировать
		MOVF	RFID_ERROR, W
		BTFSS	STATUS, Z
		 GOTO	INC_RFID1
        ;проверка 0-байта пакета со считывателя
		MOVF	RFID1_COUNT, W	
		BTFSS	STATUS, Z
		 GOTO	ERR4_CHECK
		MOVLW	023H
		SUBWF	RFID_TEMP1,W
		BTFSC	STATUS, Z
         GOTO	INC_RFID1
    	MOVLW	D'3'
		MOVWF	RFID_ERROR
		GOTO	INC_RFID1
ERR4_CHECK
        ;проверка 12-байта пакета со считывателя
		MOVLW	D'12'
		SUBWF	RFID1_COUNT, W
		BTFSS	STATUS, Z
		 GOTO	ERR5_CHECK
		MOVLW	0DH
		SUBWF	RFID_TEMP1,W
		BTFSC	STATUS, Z
	  	 GOTO	INC_RFID1
		MOVLW	D'4'
		MOVWF	RFID_ERROR	
		GOTO	INC_RFID1
ERR5_CHECK
		MOVLW	0F0H
        ANDWF	RFID_TEMP1,W
		XORLW	030H
		BTFSC	STATUS, Z
		 GOTO	ERR6_CHECK
		MOVLW	D'5'
		MOVWF	RFID_ERROR
		GOTO	INC_RFID1
ERR6_CHECK
		MOVLW	D'11'
		SUBWF	RFID1_COUNT, W
		BTFSS	STATUS, Z
         GOTO   DATA_REC
		;CALL	VERIFY_CHECKSUM
		MOVF	RFID_CHECKSUM,W
		CALL	DISPBYT
		MOVF	RFID_TEMP1, W
		CALL	DISPBYT
		MOVF	RFID_TEMP1, W
		XORWF	RFID_CHECKSUM, W
        ANDLW   0FH
		BTFSC	STATUS, Z
		 GOTO	INC_RFID1
		MOVLW	D'6'
		MOVWF	RFID_ERROR
		GOTO	INC_RFID1
DATA_REC
		MOVF	RFID_TEMP1, W
		XORWF	RFID_CHECKSUM, F
		MOVLW	0FH
		ANDWF	RFID_TEMP1,F
		DECF	RFID1_COUNT, W
		MOVWF	RFID2_COUNT
		RRF		RFID2_COUNT, F
		BCF		RFID2_COUNT, 07H
		MOVLW	C_RFID_ADRESS
		MOVWF	FSR
		MOVF	RFID2_COUNT, W
		ADDWF	FSR, F
		BTFSS	RFID1_COUNT, 00H
		 GOTO	PARITY_PROCESS
		SWAPF	RFID_TEMP1, F
		MOVF	RFID_TEMP1, W
		MOVWF	INDIR
		GOTO	INC_RFID1
PARITY_PROCESS
		MOVF	RFID_TEMP1, W
		ADDWF	INDIR, F
		GOTO	INC_RFID1
INC_RFID1
		INCF	RFID1_COUNT, F
		MOVF	RFID1_COUNT, W
		SUBLW	C_RFID_PACKET_IN_COUNT
		BTFSS	STATUS, Z
		 RETURN
		BCF		MODE, WAIT_RFID
		BSF		MODE, RFID
		RETURN
VERIFY_CHECKSUM
		MOVLW	C_RFID_ADRESS
		MOVWF	FSR
		MOVLW	C_RFID_CODE_COUNT
		MOVWF	RFID2_COUNT
		CLRW
CHECKSUM_NEXT
		XORWF	INDIR, W
		INCF	FSR, F
		DECFSZ	RFID2_COUNT, F
		 GOTO	 CHECKSUM_NEXT
		RETURN




;создание копии регистра W,STATUS,FSR  и бита Z
;-------------------
;максимальная вложенность =0
COPYREG BCF     FLAGS2,COPRP    ;сохранение номера банка
        BTFSC   STATUS,RP0      
         BSF     FLAGS2,COPRP
        BCF     STATUS,RP0      ;БАНК0
        MOVWF   COREGW          ;сохранение W
        BCF     FLAGS2,COPZ     ;сохранение старого Z
        BTFSC   STATUS,Z
         BSF    FLAGS2,COPZ
        MOVF    STATUS,W        ;сохранение STATUS
        MOVWF   COSTAT
        MOVF    FSR,W           ;сохранение FSR
        MOVWF   COFSR
        RETURN


;восстановление значения регистров W,STATUS,FSR  и бита Z
;-------------------
VOSTREG MOVF    COSTAT,W        ;восстановление STATUS
        MOVWF   STATUS
        MOVF    COFSR,W         ;восстановление FSR
        MOVWF   FSR
        MOVF    COREGW,W        ;восстановление W
        BCF     STATUS,Z        ;восстановление старого Z из копии
        BTFSC   FLAGS2,COPZ
         BSF    STATUS,Z
        BCF     STATUS,RP0      ;восстановление банка
        BTFSC   FLAGS2,COPRP     
         BSF    STATUS,RP0      
        RETURN


;начальные установки
;-------------------
SETUP   
        CLRF    INTCON          ;запрет прерываний и флагов
		;установка спец регистров

        MOVLW   B'00000111'
        MOVWF   CMCON           ;откл компараторы
        CLRF    CCP1CON         ;откл модуль ЗСШ
        CLRF    PIR1            ;очистка флагов прерываний перифирии
        CLRF    STATUS
        BSF     STATUS,RP0      ;БАНК1
        CLRF    VRCON           ;откл модуль опорного напряжения
        MOVLW   B'11111111'
        MOVWF   TRISB           ;установка PORTB вход
        MOVLW   B'00000000'
        MOVWF   TRISA           ;установка PORTA выход
        MOVLW   B'00000111'
        MOVWF   OPTIO           ;вкл п.рез, 1:256 перед TMR0,TMR0 такт.от CLKIN/4
        CLRF    EEADR           ;сброс битов 6,7 для уменьшения питания
        BCF     STATUS,RP0      ;БАНК0
        CLRF    PIR1            ;очистка флагов прерываний периферии
        MOVLW   B'11111111'     ;Подготовка PortB
        MOVWF   PORTB
        MOVLW   B'00011000'     ;Подготовка PortA, биты 3 и 4 оставляют выключенными сведодиоды, выключение замка 
        MOVWF   PORTA
        BSF     STATUS,RP0      ;БАНК1
		MOVLW	D'103'		    ;подготовка USART для передач в асинхронном высокоскоростном режиме 2400
		MOVWF	SPBRG
		MOVLW	B'00100100'
		MOVWF	TXSTA
        BCF     STATUS,RP0      ;БАНК0
		MOVLW	B'10000000'
		MOVWF	RCSTA
        ;установка рабочих регистров
		BCF		PORTA, 04H      ;включаем светодиод питания на плате
        CLRF    T1CON           ;откл таймер-счетчик1
        CLRF    T2CON           ;откл таймер-счетчик2

		CLRF	RCREG
		NOP						;очистка буфера RFID 
        CALL    ZAD1C
		CALL	RFID_ERASE
        CLRF    TMR0_COUNT_SV   ;занулить все счетчики циклов
        CLRF    TMR0_COUNT_BUT
		CLRF	TMR0_COUNT_LCK
        CLRF    SV_BRD_COUNT
		CLRF	SV_BUT_COUNT
		MOVLW	B'00000000'
		MOVWF	MODE
		MOVF    PORTB,W         ;запомнить портв как предыд. значение
        MOVWF   LASTPB
		BTFSC	LASTPB, 04H		;проверяем сигнал датчика питания, если 1
		 BSF    MODE, PWR		;в регистре режима включаем флаг аварийного питания
		CALL	TMR0_PROCESS
        ;общие по прерываниям  и включению модулей
		MOVLW	B'01011000'		;разрешение прерываний по INT, по RB4-RB7, прерываний от периферии
		MOVWF	INTCON
        BSF     STATUS,RP0      ;БАНК1
		MOVLW	B'00110000'     ;разрешение прерываний приемника/передатчика USART
		MOVWF	PIE1
        BCF     STATUS,RP0      ;БАНК0
		BSF 	RCSTA, 04H      ;вкл приемник USART
		BSF		INTCON, 07H  	;глобальное разрешение прерываний,
        RETURN


;таймер
;-------------------------------------------------------------
;-------------------------------------------------------------

;обработка процесса TMR0
;----------------------------------------------
TMR0_PROCESS
        IORLW   0FFH                            ;проверка на (Режим программирования + Закончился TMR0_COUNT_SV)
		BTFSC	MODE, PROG
         ANDWF  TMR0_COUNT_SV, W
		BTFSC	STATUS, Z
		 GOTO   TMR0_PROCESS_PRG
        IORLW   0FFH                            ;проверка на (Режим ожидания программирования + Закончился TMR0_COUNT_BUT)
		BTFSC	MODE, WAIT_PRG
         ANDWF  TMR0_COUNT_BUT, W
		BTFSC	STATUS, Z
		 GOTO   TMR0_PROCESS_WAITPRG
		IORLW	0FFH
		BTFSC	MODE, WAIT_LCK
		 ANDWF	TMR0_COUNT_LCK, W
		BTFSC	STATUS, Z
		 GOTO	TMR0_PROCESS_WAITLCK 
        IORLW   0FFH                            ;проверка на (Авт Питание + Закончился TMR0_COUNT_SV)
		BTFSC	MODE, PWR
         ANDWF  TMR0_COUNT_SV, W
		BTFSC	STATUS, Z
		 GOTO	TMR0_PROCESS_PWR                ;новый цикл таймера для индикации Авт Питания
        IORLW	0FFH
		BTFSC	MODE, WAIT_RFID
		 ANDWF	RFID_TIMEOUT, W
		BTFSC	STATUS, Z
		 GOTO	TMR0_RFID_TIMEOUT
		NOP                                     ;проверить на таймер больше не нужен
		BTFSC	MODE, PROG
         RETURN
		BTFSC	MODE, PWR
         RETURN
		BTFSC	MODE, WAIT_PRG
         RETURN
		BTFSC	MODE, WAIT_LCK
		 RETURN
		BTFSC	MODE, WAIT_RFID
		 RETURN
    	CALL 	TMR0_OFF                        ;таймер больше не нужен
        RETURN
TMR0_PROCESS_PRG
	    MOVLW	C_TMR0_PRG_CYCL                 ;подготовить счетчик прерываний TMR0 для мигания
		MOVWF	TMR0_COUNT_SV
   		CALL	TMR0_ON                         ;запустить таймер для мигания
        RETURN
TMR0_PROCESS_WAITPRG                            
		MOVLW	C_TMR0_LONG_BUT                 ;подготовить счетчик прерываний TMR0 для долгого нажатия кнопки
		MOVWF	TMR0_COUNT_BUT
		CALL	TMR0_ON                         ;запустить таймер для осчета периода долгого нажатия кнопки
        RETURN
TMR0_PROCESS_WAITLCK
		MOVLW	C_TMR0_LONG_LCK
		MOVWF	TMR0_COUNT_LCK
		CALL	TMR0_ON
		RETURN
TMR0_PROCESS_PWR
	    MOVLW	C_TMR0_PWR_CYCL                 ;подготовить счетчик прерываний TMR0 для мигания  
		MOVWF	TMR0_COUNT_SV
		CALL	TMR0_ON                         ;запустить таймер для мигания
        RETURN
TMR0_RFID_TIMEOUT
		MOVLW	C_RFID_TIMEOUT
		MOVWF	RFID_TIMEOUT
		CALL	TMR0_ON
		RETURN
	
;включение таймер TMR0
;------------------------------------------------------------
TMR0_ON	
		CLRF	TMR0			 ;передаем 0 в регистр счета таймера для сброса
		CALL	SVD_BUTTON		 ;обработка состояний светодиодов
		CALL 	SVD_BOARD		
		BSF		INTCON, 05H		 ;разрешение прерываний по таймеру
		RETURN

;віключение таймер TMR0
;-------------------------------------------------------------
TMR0_OFF
        CLRF    TMR0_COUNT_SV
        CLRF    TMR0_COUNT_BUT
        CLRF    RFID_TIMEOUT
  		CALL	SVD_BUTTON		;обработка состояний светодиодов
		CALL 	SVD_BOARD		
		BCF		INTCON, 05H		;запрет прерываний по таймеру
		RETURN
;-------------------------------------------------------------

;замок
;-------------------------------------------------------------
;-------------------------------------------------------------
LOCK_ON
		BSF		MODE, LCK					;включение замка 
		BSF		PORTA, 06H
		CALL	SVD_BUTTON					;обработка светодиода на кнопке
		RETURN
;-------------------------------------------------------------
LOCK_OFF
		BCF		MODE, LCK					;выключение замка 
		BCF		PORTA, 06H
		CALL	SVD_BUTTON					;обработка светодиода на кнопке
		RETURN



;индикация
;-------------------------------------------------------------
;-------------------------------------------------------------

;светодиод на плате
;-------------------------------------------------------------
SVD_BOARD
		BTFSC	MODE, PROG                  ;проверка на режим программирования
		 GOTO   SV_BOARD_BLINK
		BTFSC	MODE, PWR                   ;проверка на режим аккумуляторного питания
		 GOTO	SV_BOARD_BLINK
		CALL	SV_BRD_ON	                ;засветить светодиод питания
		RETURN
SV_BOARD_BLINK					    	    ;мигание светодиода
        MOVLW   C_SV_BASE_CYCL              ;подготовить счетчик циклов работы светодиода для прерывистого мигания
        MOVF    SV_BRD_COUNT, F
		BTFSC	STATUS, Z
         MOVWF  SV_BRD_COUNT
		BTFSS	MODE, ADD_DEL               ;проверка на режим программирования на удаление
		 GOTO	SV_BOARD_BLINK_BEGIN        ;перейти к миганию
        NOP                                 ;проверить на необходимость паузы в мигании	
        MOVLW   C_SV_HALF_CYCL              ;половина базового значения циклов - порог для паузы в мигании	
        ANDLW   B'01111111'
		SUBWF	SV_BRD_COUNT, W
		BTFSS	STATUS, CY
		 GOTO	SV_BOARD_BLINK_BEGIN        ;перейти к миганию
		CALL	SV_BRD_OFF                  ;погасить светодиод (пауза в мигании)
		GOTO    SV_BOARD_BLINK_END
SV_BOARD_BLINK_BEGIN                        ;мигание
		BTFSS	SV_STATUS, SVD_BRD
         GOTO 	SV_BOARD_BLINK_1
		CALL 	SV_BRD_OFF
		GOTO    SV_BOARD_BLINK_END
SV_BOARD_BLINK_1 
		CALL	SV_BRD_ON
		GOTO    SV_BOARD_BLINK_END
SV_BOARD_BLINK_END                          ;декриментировать счетчик циклов работы светодиода
		DECF 	SV_BRD_COUNT, F
		RETURN

		
;кнопочный светодиод
;-----------------------------------------------------------		
SVD_BUTTON						
		BTFSC	MODE, LCK		 ;если замок включен, переходим
		 GOTO	SV_BUTT_LCK_ON
		BTFSC	MODE, PROG		 ;если включен режим программирования, переходим
		 GOTO	SV_BUTT_BLINK
		BTFSC	MODE, PWR		 ;если включен режим аккумуляторного питания, переходим
		 GOTO	SV_BUTT_BLINK
		CALL	SV_BTTN_OFF		 ;выключаем светодиод
		RETURN
SV_BUTT_LCK_ON					 ;если замок работает, светодиод горит
		CALL	SV_BTTN_ON
		RETURN
SV_BUTT_BLINK					    	    ;мигание светодиода
        MOVLW   C_SV_BASE_CYCL              ;подготовить счетчик циклов работы светодиода для прерывистого мигания
        MOVF    SV_BUT_COUNT, F
		BTFSC	STATUS, Z
         MOVWF  SV_BUT_COUNT
		BTFSS	MODE, ADD_DEL               ;проверка на режим программирования на удаление
		 GOTO	SV_BUTT_BLINK_BEGIN        ;перейти к миганию
        NOP                                 ;проверить на необходимость паузы в мигании	
        MOVLW   C_SV_HALF_CYCL              ;половина базового значения циклов - порог для паузы в мигании	
        ANDLW   B'01111111'
		SUBWF	SV_BUT_COUNT, W
		BTFSS	STATUS, CY
		 GOTO	SV_BUTT_BLINK_BEGIN        ;перейти к миганию
		CALL	SV_BTTN_OFF                ;погасить светодиод (пауза в мигании)
		GOTO    SV_BUTT_BLINK_END
SV_BUTT_BLINK_BEGIN                        ;мигание
		BTFSS	SV_STATUS, SVD_BTTN
         GOTO 	SV_BUTT_BLINK_1
		CALL	SV_BTTN_OFF	
		GOTO    SV_BUTT_BLINK_END			;--------------------------------------------------------------------------------------------  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SV_BOARD_BLINK_END
SV_BUTT_BLINK_1 
		CALL	SV_BTTN_ON
		GOTO    SV_BUTT_BLINK_END
SV_BUTT_BLINK_END                          ;декриментировать счетчик циклов работы светодиода
		DECF 	SV_BUT_COUNT, F
		RETURN 

;управление состоянием светодиода на плате
;---------------------------------------------------------------
SV_BRD_ON
		BCF		PORTA, SV_BRD
		BSF		SV_STATUS, SVD_BRD	
		RETURN

SV_BRD_OFF
		BSF		PORTA, SV_BRD
		BCF		SV_STATUS, SVD_BRD
		RETURN

;управление состоянием светодиода на кнопке
;---------------------------------------------------------------
SV_BTTN_ON
		BCF		PORTA, SV_BTTN
		BSF		SV_STATUS, SVD_BTTN
		RETURN

SV_BTTN_OFF
		BSF		PORTA, SV_BTTN
		BCF		SV_STATUS, SVD_BTTN
		RETURN

;очистка буфера RFID
;---------------------------------------------------------------
RFID_ERASE		
		MOVLW	C_RFID_ADRESS
		MOVWF	FSR
		MOVLW	C_RFID_CODE_COUNT
		MOVWF	RFID2_COUNT
NEXT
		CLRF	INDIR
		INCF	FSR, F
		DECFSZ	RFID2_COUNT, F
		 GOTO	 NEXT
		CLRF	RFID1_COUNT
		CLRF	RFID2_COUNT
		CLRF	RFID_ERROR
		CLRF	RFID_CHECKSUM
		RETURN

;основная программа
;максимальная вложенность процедур = 3
;-------------------
START   NOP
	    BTFSS	MODE, RFID	
	     GOTO	START
        ;код RFID-ключа или ошибка при его получении есть в буффере
	    MOVF	RFID_ERROR, W
	    BTFSC	STATUS, Z
	     GOTO	START_DISPRFIDCODE
START_DISPRFIDERROR
        ;индикация ошибки при получении ключа
	    MOVF	RFID_ERROR, W
	    CALL	DISPBYT
	    GOTO	START_CLEARRFID
START_DISPRFIDCODE
        ;индикация кода ключа
	    MOVF	RFID0, W
	    CALL	DISPBYT
	    MOVF	RFID1, W
	    CALL	DISPBYT
	    MOVF	RFID2, W
	    CALL	DISPBYT
	    MOVF	RFID3, W
	    CALL	DISPBYT
	    MOVF	RFID4, W
	    CALL	DISPBYT
		BTFSC	MODE, PROG
		 GOTO	START_RFID_PROGMODE
        ;обработка ключа в режиме обычной работы
		CALL	FIND_RFID_EEPROM
		BTFSS	STATUS, Z
		 CALL	LOCK_OFF
		GOTO	START_CLEARRFID
START_RFID_PROGMODE
        ;обраблотка ключа в режиме программирования 
		BTFSC	MODE, ADD_DEL
         GOTO   START_RFID_ERASEMODE
        ;обраблотка ключа в режиме программирования 
		CALL	FIND_RFID_EEPROM
		BTFSC	STATUS, Z
		 CALL	KEY_ADD
		MOVLW	015H
		CALL	DISPBYT
		GOTO	START_CLEARRFID	
START_RFID_ERASEMODE
        ;обраблотка ключа в режиме очистки памяти 
        CALL	KEYS_ERASE
		GOTO	START_CLEARRFID	
START_CLEARRFID
        ;завершение работы с ключем
	    CALL	RFID_ERASE
	    BCF		MODE, RFID
	    BCF		MODE, WAIT_RFID
	    CALL	TMR0_PROCESS
		GOTO	START


;Поиск ключа в памяти
;-------------------
;найдено STATUS,Z=0 / не найдено STATUS,Z=1
FIND_RFID_EEPROM
		CLRF	EEPROM_BYTE_COUNT
		CLRF	EEPROM_KEYS_COUNT
		;чтение	количества ключей в EEPROM
		BSF		STATUS, RP0
		CLRF	EEADR
		BSF		EECON1, RD
		MOVF	EEDATA, W
		BCF		STATUS, RP0
		BTFSC	STATUS, Z
		 RETURN                         ;выход если ключей в памяти нет      
		MOVWF   EEPROM_KEYS_COUNT
        ;подготовка начального адреса EEPROM для чтения
		BSF		STATUS, RP0
		INCF	EEADR, F
		BCF		STATUS, RP0
FIND_RFID_EEPROM_NEXTKEY
        ;подготовка начального адреса буффера RFID для чтения
		MOVLW	C_RFID_ADRESS
		MOVWF	FSR
		MOVLW	C_RFID_CODE_COUNT
		MOVWF	EEPROM_BYTE_COUNT
FIND_RFID_EEPROM_NEXTBYTE
        ;чтение байта из EEPROM и сравнение с байтом RFID
		BSF		STATUS, RP0
		BSF		EECON1, RD
		MOVF	EEDATA, W
		BCF		STATUS, RP0
		SUBWF	INDIR, W
		BTFSC	STATUS, Z
		 GOTO	FIND_RFID_EEPROM_EQUAL
        ;если байты не равны
		DECF	EEPROM_KEYS_COUNT, F
		BTFSC	STATUS, Z
		 RETURN                             ;выход если это был последний ключ в памяти      
        ;подготовка адреса EEPROM на след ключ
		MOVF	EEPROM_BYTE_COUNT, W
		BSF		STATUS, RP0
        ADDWF   EEADR, F
		BCF		STATUS, RP0
		GOTO    FIND_RFID_EEPROM_NEXTKEY    ;переход на обработку след ключа
FIND_RFID_EEPROM_EQUAL
        ;если байты равны
		DECF	EEPROM_BYTE_COUNT, F
		BTFSC	STATUS, Z
		 GOTO   FIND_RFID_EEPROM_SUCCES     ;переход на успешное завершение если это был последний байт ключа      
        ;подготовка адреса EEPROM и буффера RFID на след байт ключа
		BSF		STATUS, RP0
		INCF	EEADR, F
		BCF		STATUS, RP0
		INCF	FSR, F
		GOTO    FIND_RFID_EEPROM_NEXTBYTE   ;переход на обработку след байта ключа
FIND_RFID_EEPROM_SUCCES
        ;успешное завершение если это был последний байт ключа      
		MOVF	EEPROM_KEYS_COUNT, W        ;в W - номер найденого ключа, начиная с последнего
        RETURN


;Добавлени ключа в память
;-------------------
;добавлено или уже был STATUS,Z=0 / не добавлено STATUS,Z=1
KEY_ADD
		CLRF	EEPROM_BYTE_COUNT
		CLRF	EEPROM_KEYS_COUNT
		;чтение	количества ключей в EEPROM
		BSF		STATUS, RP0
		CLRF	EEADR
		BSF		EECON1, RD
		MOVF	EEDATA, W
		BCF		STATUS, RP0
		MOVWF   EEPROM_KEYS_COUNT
        ;проверка максимум ключей в памяти
        MOVLW   C_EEPROM_MAXKEYS
        SUBWF   EEPROM_KEYS_COUNT, W
		BTFSC	STATUS, Z
		 RETURN                             ;выход если уже максимум ключей в памяти      
        ;подготовка адреса EEPROM и буффера RFID на запись
		MOVLW	C_RFID_ADRESS
		MOVWF	FSR
		MOVLW	C_RFID_CODE_COUNT
		MOVWF	EEPROM_BYTE_COUNT
		BSF		STATUS, RP0
		INCF	EEADR, F
		BCF		STATUS, RP0
		MOVF    EEPROM_KEYS_COUNT, W
		BTFSC	STATUS, Z
		 GOTO   KEY_ADD_WRITE_NEXTBYTE     ;переход на запись байта
KEY_ADD_NEXTKEY
 		BSF		STATUS, RP0
		MOVLW	C_RFID_CODE_COUNT
        ADDWF   EEADR, F
		BCF		STATUS, RP0
		DECFSZ	EEPROM_KEYS_COUNT, F
		 GOTO	KEY_ADD_NEXTKEY
KEY_ADD_WRITE_NEXTBYTE
        MOVF    INDIR, W
 		BSF		STATUS, RP0
        MOVWF   EEDATA
        ;запись байта EEPROM
        CALL    EEPRPOM_WRITE
        ;подготовка адреса EEPROM и буффера RFID на след байт ключа
		BSF		STATUS, RP0
		INCF	EEADR, F
		BCF		STATUS, RP0
		INCF	FSR, F
		DECFSZ	EEPROM_BYTE_COUNT, F
		 GOTO   KEY_ADD_WRITE_NEXTBYTE   ;переход на обработку след байта ключа
KEY_ADD_WRITE_NEWKEYCOUNT
        ;увеличить кол-во ключей в памяти
		BSF		STATUS, RP0
		CLRF	EEADR
		BSF		EECON1, RD
		INCF	EEDATA, F
		MOVF	EEDATA, W
		BCF		STATUS, RP0
        MOVWF   EEPROM_KEYS_COUNT
        ;запись байта EEPROM
        CALL    EEPRPOM_WRITE
		MOVF	EEPROM_KEYS_COUNT, W        ;в W - номер записанного ключа
        RETURN



KEYS_ERASE
		BSF		STATUS, RP0
		CLRF	EEADR
		CLRF	EEDATA
		BSF		EECON1, WREN
		BCF		INTCON, 07H
		MOVLW	055H
		MOVWF	EECON2
		MOVLW	0AAH
		MOVWF	EECON2
		BSF		EECON1, WR
		BCF		EECON1, WREN
		BSF		INTCON,	07H
		BCF		STATUS, RP0
		RETURN


;запись байта EEPROM
;-------------------
EEPRPOM_WRITE
		;обязательная конструкция для записи
 		BSF		STATUS, RP0
		BSF		EECON1, WREN
		BCF		INTCON, 07H
		MOVLW	055H
		MOVWF	EECON2
		MOVLW	0AAH
		MOVWF	EECON2
		BSF		EECON1, WR
EEPRPOM_WRITE_WAIT
        BTFSC   EECON1, WR
         GOTO   EEPRPOM_WRITE_WAIT    ;ожидание завершения записи
		BCF		EECON1, WREN
		BSF		INTCON, 07H
		BCF		STATUS, RP0
        RETURN


;индикация символа
;регист W в младшем полубайте должен содержать индицируемое значение
;используется временный регистр RR1DISP и RR2DISP первого банка
;по выходу портится значение в W
;----------------------
;максимальная вложенность процедур = 0
DISPLEY IORLW   00H             ;перекодировка 0 для ЖКИ
        BTFSC   STATUS,Z
         MOVLW   0AH
        BSF     STATUS,RP0      ;БАНК1
        MOVWF   RR1DISP
        MOVLW   04H             ;выдача 1 полубайта(1 знака) на индикатор
        MOVWF   RR2DISP
NBITDIS MOVF    RR1DISP,W
        ANDLW   B'00001000'
        BCF     STATUS,RP0      ;БАНК0
        BCF     PORTA,00H       ;установка данных(инверс.)
        BTFSC   STATUS,Z
         BSF     PORTA,00H
        BSF     PORTA,01H       ;сброс такта(инверс.) - запись в ЖКИ
        BCF     PORTA,01H       ;установка такта(инверс.)
        BCF     PORTA,00H       ;установка данных(инверс.)
        BSF     STATUS,RP0      ;БАНК1
        RLF     RR1DISP,F
        DECFSZ  RR2DISP,F
         GOTO    NBITDIS        ;следующий бит
        BCF     STATUS,RP0      ;БАНК0
        RETURN


;индикация байта
;регист W должен содержать индицируемое значение
;используется временный регистр RR1DISP и RR2DISP
;по выходу портится значение в W
;----------------------
DISPBYT BSF     STATUS,RP0      ;БАНК1
        MOVWF   RR1DISP         ;выдача байта на индикатор без перекодировки
        MOVLW   08H             
        MOVWF   RR2DISP
NBITDBY MOVF    RR1DISP,W
        ANDLW   B'10000000'
        BCF     STATUS,RP0      ;БАНК0
        BCF     PORTA,00H       ;установка данных(инверс.)
        BTFSC   STATUS,Z
         BSF     PORTA,00H
        BSF     PORTA,01H       ;сброс такта(инверс.) - запись в ЖКИ
        BCF     PORTA,01H       ;установка такта(инверс.)
        BCF     PORTA,00H       ;установка данных(инверс.)
        BSF     STATUS,RP0      ;БАНК1
        RLF     RR1DISP,F
        DECFSZ  RR2DISP,F
         GOTO    NBITDBY        ;следующий бит
        BCF     STATUS,RP0      ;БАНК0
        RETURN


;бланк ЖКИ
;------------------------------
BLANK   BSF     STATUS,RP0      ;БАНК1
        MOVLW   .40             ;40 бит для 10 разрядов
        MOVWF   RR1DISP
NBITBLA BCF     STATUS,RP0      ;БАНК0
        BSF     PORTA,00H       ;удаление данных(инверс.)
        BSF     PORTA,01H       ;сброс такта(инверс.)
        BCF     PORTA,01H       ;установка такта(инверс.)
        BCF     PORTA,00H       ;установка данных(инверс.)
        BSF     STATUS,RP0      ;БАНК1
        DECFSZ  RR1DISP,F
         GOTO    NBITBLA        ;следующий бит
        BCF     STATUS,RP0      ;БАНК0
        RETURN




;задержка между записью блоков в память(>=5мс)
;-------------------------------------------
ZAD5MC  MOVLW   D'7'
        MOVWF   ZADH
LZAD1   MOVLW   0FFH
        MOVWF   ZADL
LZAD2   DECFSZ  ZADL,F
         GOTO   LZAD2
        DECFSZ  ZADH,F
         GOTO   LZAD1
        RETURN



;задержка (1с)
;-------------------------------------------
ZAD1C   MOVLW   D'200'
        MOVWF   ZADS
LZAD3   CALL    ZAD5MC
        DECFSZ  ZADS,F
         GOTO   LZAD3
        RETURN


;задержка (50 мс)
;-------------------------------------------
ZAD50MC   MOVLW   D'100'
          MOVWF   ZADS
LZAD4     CALL    ZAD5MC
          DECFSZ  ZADS,F
          GOTO    LZAD4
          RETURN
;-------------------------------------------


        ORG     2000H           ;ID

        DATA    3333H
        DATA    3333H
        DATA    3333H
        DATA    3333H

        ORG     2007H           ;FUSES

        DATA    B'11110100010000'

		ORG     2100H           ;ROM
		DATA	00H             ;количество ключей в пямяти

END



